{"version":3,"sources":["redux/constant.js","redux/actions/sum.js","containers/Sum/Sum.jsx","containers/Person/Person.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/sum.js","redux/store.js","index.js"],"names":["ADDPERSON","increment","data","type","Sum","value","selectNumber","props","add","decrement","minus","incrementIfOdd","sum","incrementAsync","addAsync","this","persons","length","ref","c","onClick","Component","connect","state","total","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","map","App","initState","combineReducers","preState","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.a35db171.chunk.js","sourcesContent":["/*\n    该模块是用于定义action对象中type类型的常量值，目的只有一个：便于管理的同时防止程序员单词写错\n*/\n\nexport const INCREMENT = '+'\nexport const DECREMENT = '-'\nexport const ADDPERSON = 'add_person'","/*\n    该文件专门为Count组件生成action对象\n*/\nimport { INCREMENT, DECREMENT } from '../constant'\n\n//同步action，就是指action的值为Object类型的一般对象\nexport const increment = data => ({ type: INCREMENT, data })\nexport const decrement = data => ({ type: DECREMENT, data })\n\n//异步action，就是指action的值为函数,异步action中一般都会调用同步action，异步action不是必须要用的。\nexport const incrementAsync = (data, time) => {\n    return (dispatch) => {\n\n        setTimeout(() => {\n            dispatch(increment(data))\n        }, time)\n    }\n}\n","import React, { Component } from 'react'\n//引入action\nimport {\n    increment,\n    decrement,\n    incrementAsync\n} from '../../redux/actions/sum'\n//引入connect用于连接UI组件与redux\nimport { connect } from 'react-redux'\n\nclass Sum extends Component {\n\n    increment = () => {\n        const { value } = this.selectNumber\n        this.props.add(value * 1)\n    }\n\n    decrement = () => {\n        const { value } = this.selectNumber\n        this.props.minus(value * 1)\n    }\n\n    incrementIfOdd = () => {\n        const { value } = this.selectNumber\n        if (this.props.sum % 2 !== 0) {\n            this.props.add(value * 1)\n        }\n    }\n\n    incrementAsync = () => {\n        const { value } = this.selectNumber\n        this.props.addAsync(value * 1, 500)\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>我是Sum组件，下方组件人数为：{this.props.persons.length}</h2>\n                <h4>Sum is: {this.props.sum}</h4>\n                <select ref={c => this.selectNumber = c}>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                </select>&nbsp;\n                <button onClick={this.increment}>+</button>&nbsp;\n                <button onClick={this.decrement}>-</button>&nbsp;\n                <button onClick={this.incrementIfOdd}>add if odd</button>&nbsp;\n                <button onClick={this.incrementAsync}>add async</button>\n            </div>\n        )\n    }\n}\n\n//使用connect()()创建并暴露一个Sum的容器组件\nexport default connect(\n    state => ({ sum: state.total, persons: state.persons }),\n    {\n        add: increment,\n        minus: decrement,\n        addAsync: incrementAsync\n    }\n)(Sum)","import React, { Component } from 'react'\nimport { nanoid } from \"nanoid\";\nimport { connect } from 'react-redux'\n\nimport { addPerson } from '../../redux/actions/person'\n\nclass Person extends Component {\n\n    addPerson = () => {\n        const name = this.nameNode.value\n        const age = this.ageNode.value\n        const personObj = { id: nanoid(), name, age }\n        this.props.addPerson(personObj)\n        this.nameNode.value = ''\n        this.ageNode.value = ''\n    }\n    render() {\n        const { persons } = this.props\n        return (\n            <div>\n                <h2>我是Person组件，上方组件求和为：{this.props.sum}</h2>\n                <input ref={c => this.nameNode = c} type=\"text\" placeholder=\"enter name\" />&nbsp;\n                <input ref={c => this.ageNode = c} type=\"text\" placeholder=\"enter age\" />\n                <button onClick={this.addPerson}>Add</button>\n                <ul>\n                    {\n                        persons.map((personObj) => {\n                            return <li key={personObj.id}>{personObj.name}--{personObj.age}</li>\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default connect(\n    state => ({ persons: state.persons, sum: state.total }),\n    {\n        addPerson: addPerson\n    }\n)(Person)","import { ADDPERSON } from '../constant'\n\nexport const addPerson = (personObj) => ({ type: ADDPERSON, data: personObj })","import React, { Component } from 'react'\n\nimport Sum from './containers/Sum/Sum' // 引入Sum的容器组件\nimport Person from './containers/Person/Person' /* 引入Person的容器组件 */\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div>\n                <Sum />\n                <hr />\n                <Person />\n            </div>\n        )\n    }\n}\n","import { ADDPERSON } from '../constant'\nimport { nanoid } from 'nanoid'\n\nconst initState = [{ id: nanoid(), name: 'tom', age: 18 }]\n\nexport default function personReducer(preState = initState, action) {\n    const { type, data } = action\n    // console.log('person...reducer')\n    switch (type) {\n        case ADDPERSON:\n            return [...preState, data]\n        default:\n            return preState;\n    }\n\n}","/* 该文件用于汇总所有的reducer */\n//引入createStore，专门用于创建redux中最为核心的store对象\nimport { combineReducers } from 'redux'\n//引入为Sum组件服务的reducer\nimport sumReducer from './sum'\n//引入为Perosn组件服务的reducer\nimport personReducer from './person'\n\n// 汇总所有的reducer变为一个总的reducer\nexport default combineReducers({\n    total: sumReducer,\n    persons: personReducer\n})","/*\n    1.该文件是用于创建一个为Sum组件服务的reducer，reducer的本质就是一个函数\n    2.reducer函数会接到两个参数，分别为：之前的状态(preState)，动作对象(action)\n*/\nimport {INCREMENT, DECREMENT} from '../constant'\n\nconst initState = 0 //初始化状态\n\nexport default function sumReducer(preState = initState, action) {\n    // console.log('sum...reducer')\n    // if (preState === undefined) {\n    //     preState = 0\n    // }\n    //从action对象中获取：type、data\n    const { type, data } = action\n\n    //根据type决定如何加工数据\n    switch (type) {\n        case INCREMENT:\n            return preState + data\n        case DECREMENT:\n            return preState - data\n        default:\n            return preState\n    }\n}","/*\n    该文件专门用于暴露一个store对象，整个应用只有一个store对象\n*/\n\n//引入createStore，专门用于创建redux中最为核心的store对象\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\n//引入汇总之后的reducer\nimport reducer from '../redux/reducers'\n\n//引入redux-thunk，用于支持异步action\nimport thunk from 'redux-thunk'\n// import redux-devtools-extension\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\n\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from './redux/store'\n\nReactDOM.render(\n    /* 此处需要用Provider包裹App,目的是让App所有的后代容器组件都能到store */\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n)"],"sourceRoot":""}